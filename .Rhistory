library(dplyr)        #
library(knitr)        #
library(stringr)     #
library(readr)        #
library(qtalrkit)     #
library(fs)
doc_en <-
read_lines(file = "data/original/CART.en")
doc_cn <-
read_lines(file = "data/original/CART.cn")
str_view(doc_en, "\\b[Mm]ay\\b", match = NA)
str_view(doc_en, "\\b[Mm]ay\\b", NA)
str_view(doc_en, "[Mm]ay", NA)
doc_en <- str_split(doc_en, "\n")
str_view(doc_en, "\\b[Mm]ay\\b", match = NA)
str_view(doc_en, "may.", match = NA)
library(stringr)
# 将文本分割成行
lines <- str_split(doc_en, "\n")
# 初始化一个空列表，用于存储匹配到的结果
matches <- list()
# 遍历每一行，查找匹配的结果
for (line in lines) {
matches_line <- str_view_all(line, "\\b[Mm]ay\\b")
matches <- c(matches, list(matches_line))
}
# 输出匹配的结果
for (i in 1:length(matches)) {
print(matches[[i]])
}
library(stringr)
# 统计 "may" 或者首字母大写的 "May" 出现的次数
count_may <- str_count(doc_en, "\\bmay\\b|\\bMay\\b")
# 输出 "may" 出现的总次数
print(count_may)
library(readtext)
doc_en <- readtext("data/original/ST")
doc_en <- readtext("data/original/ST.doc")
doc_cn <- readtext("data/original/TT.doc")
View(lines)
View(doc_en)
str_view(doc_en, "\\b[Mm]ay\\b", match = NA)
text_content_en <- doc_en$text
text_content_cn <- doc_cn$text
lines_en <- readLines(textConnection(text_content_en))
lines_cn <- readLines(textConnection(text_content_cn))
head(lines_en)
str_view(lines_en, "\\b[Mm]ay\\b", match = NA)
hedg_may <-
str_view(doc_en, "\\b[Mm]ay\\b", match = NA)
hedg_may
names(doc_en)
hedg_may <-
str_extract(doc_en$text, "\\b[Mm]ay\\b", match = NA)
hedg_may <- str_replace_all(doc_en$text, "\\b[Mm]ay\\b", "")
hedg_may
hedg_may <-
str_extract(doc_en$text, "\\b[Mm]ay\\b")
hedg_may
hedg_may <-
str_extract_all(doc_en$text, ".*\\b[Mm]ay\\b.*")
hedg_may
doc_en <- readtext("data/original/ST.doc")
doc_cn <- readtext("data/original/TT.doc")
text_content_en <- doc_en$text
text_content_cn <- doc_cn$text
lines_en <- readLines(textConnection(text_content_en))
lines_cn <- readLines(textConnection(text_content_cn))
hedg_may <-
str_extract_all(doc_en$text, ".*\\b[Mm]ay\\b.*")
hedg_may
str_extract_all(doc_en$text, ".*\\b[Tt]ypically\\b.*")
str_extract_all(doc_en$text, ".*\\b[Rr]elatively\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ss]lightly\\b.*")
str_extract_all(doc_en$text, ".*\\b[Pp]robably\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ss]uggest.*\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ee]specially\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ss]ubstantially\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ss]ignificantly\\b.*")
str_extract_all(doc_en$text, ".*\\b[Dd]ramatically\\b.*")
str_extract_all(doc_en$text, ".*\\b[Pp]recisely\\b.*")
str_extract_all(doc_en$text, ".*\\b[Mm]erely\\b.*")
str_extract_all(doc_en$text, ".*\\b[Pp]articularly\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ii]n\\s*particular\\b.*")
str_extract_all(doc_en$text, ".*\\b[Vv]ery\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ww]ithout\\s*any\\b.*")
str_extract_all(doc_en$text, ".*\\b[Dd]emonstrate.*\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ii]ndicate.*\\b.*")
str_extract_all(doc_en$text, ".*\\b[Vv]erif.*\\b.*")
str_extract_all(doc_en$text, ".*\\b[Dd]ifficult\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ss]ignificant\\b.*")
str_extract_all(doc_en$text, ".*\\b[Gg]iven\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ww]e\\b.*")
str_extract_all(doc_en$text, ".*\\b[Oo]ur\\b.*")
str_extract_all(doc_en$text, ".*\\b[Hh]owever\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ww]hile\\b.*")
str_extract_all(doc_en$text, ".*\\b[Bb]ut\\b.*")
str_extract_all(doc_en$text, ".*\\b[Tt]hus\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ii]n\\s*contrast(?:\\sto)?\\b.*")
str_extract_all(doc_en$text, ".*\\b[Aa]dditionally\\b.*")
str_extract_all(doc_en$text, ".*\\b[Mm]oreover\\b.*")
str_extract_all(doc_en$text, ".*\\b[Aa]lso\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ss]till\\b.*")
str_extract_all(doc_en$text, ".*\\b[Tt]herefore\\b.*")
str_extract_all(doc_en$text, ".*\\b[Aa]s\\s*such\\b.*")
str_extract_all(doc_en$text, ".*\\b[Aa]nd\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ff]irst.*\\b.*")
str_extract_all(doc_en$text, ".*\\b[Tt]hen\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ff]urther\\b.*")
str_extract_all(doc_en$text, ".*\\b[Rr]ecently\\b.*")
str_extract_all(doc_en$text, ".*\\b[Hh]ere\\b.*")
str_extract_all(doc_en$text, ".*\\b[Tt]aken\\s*together\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ff]ig\\b.*")
str_extract_all(doc_en$text, ".*\\b[Vv]ideo\\b.*")
str_extract_all(doc_en$text, ".*\\b[Mm]ethods\\b.*")
str_extract_all(doc_en$text, ".*\\bMethods\\b.*")
str_extract_all(doc_en$text, ".*\\b[Aa]s\\s*describe.*\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ff]or\\s*instance\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ii]ncluding\\b.*")
str_extract_all(doc_cn$text, ".*一定程度上.*")
View(doc_cn)
str_extract_all(doc_cn$text, ".*一定程度上.*", use_bytes = TRUE)
str_extract_all(doc_cn$text, "程度")
str_extract_all(doc_cn$text, "一定程度上")
Filter(function(x) Encoding(x) == "UTF-8", doc_cn$text[(grep("一定程度上", doc_cn$text, value = FALSE, perl = TRUE))]
grep("一定程度上", doc_cn$text, value = FALSE, perl = TRUE
indices <- grep("一定程度上", doc_cn$text, value = FALSE, perl = TRUE)
# 使用索引过滤出这些句子
matched_sentences <- Filter(function(x) Encoding(x) == "UTF-8", doc_cn$text[indices])
# 输出匹配到的句子
print(matched_sentences)
indices <- grep("程度", doc_cn$text, value = FALSE, perl = TRUE)
# 使用索引过滤出这些句子
matched_sentences <- Filter(function(x) Encoding(x) == "UTF-8", doc_cn$text[indices])
# 输出匹配到的句子
print(matched_sentences)
library(stringr)
# 匹配含有 "一定程度上" 的句子
degree_sentences <- str_extract_all(doc_cn$text, ".*一定程度上.*", ignore_case = TRUE, simplify = TRUE)
library(stringr)
# 匹配含有 "一定程度上" 的句子
degree_sentences <- str_extract_all(doc_cn$text, ".*一定程度上.*", simplify = TRUE)
# 输出匹配到的句子数量
print(length(degree_sentences))
# 输出含有 "一定程度上" 的句子
for (sentence in degree_sentences) {
print(sentence)
}
sentence
library(stringr)
# 匹配含有 "一定程度上" 的句子
degree_sentences <- str_extract_all(doc_cn$text, ".*一定程度上.*", simplify = TRUE)
# 输出匹配到的句子数量
print(length(degree_sentences))
# 输出含有 "一定程度上" 的句子
for (sentence in degree_sentences) {
print(sentence)
}
sentence
file_cn <- "data/original/TT.doc"
Encoding(file_cn) <- "UTF-8"
doc_cn <- readtext(file_cn)
text_content_cn <- doc_cn$text
lines_cn <- readLines(textConnection(text_content_cn))
str_extract_all(doc_cn$text, ".*一定程度上.*")
str_extract_all(doc_cn$text, "一定程度")
str_extract_all(doc_cn$text, ".*\\可能.*")
str_extract_all(doc_cn$text, ".*一定.*")
str_extract_all(doc_cn$text, ".*一定程度.*")
str_extract_all(doc_cn$text, ".*几乎.*")
str_extract_all(doc_cn$text, ".*可以说是.*")
str_extract_all(doc_cn$text, ".*略有.*")
str_extract_all(doc_cn$text, ".*不存在.*")
str_extract_all(doc_cn$text, ".*不会.*")
str_extract_all(doc_cn$text, ".*\\无法.*")
str_extract_all(doc_cn$text, ".*不再.*")
str_extract_all(doc_cn$text, ".*无需.*")
str_extract_all(doc_cn$text, ".*不对.*")
str_extract_all(doc_cn$text, ".*对.*")
str_extract_all(doc_cn$text, ".*不.*")
str_extract_all(doc_cn$text, ".*均不.*")
str_extract_all(doc_cn$text, ".*\\更是.*")
str_extract_all(doc_cn$text, ".*必需.*")
str_extract_all(doc_cn$text, ".*就能.*")
str_extract_all(doc_cn$text, ".*任何.*")
str_extract_all(doc_cn$text, ".*大大.*")
str_extract_all(doc_cn$text, ".*\\尤其.*")
str_extract_all(doc_cn$text, ".*只有.*")
str_extract_all(doc_cn$text, ".*仅.*")
str_extract_all(doc_cn$text, ".*最.*")
str_extract_all(doc_cn$text, ".*极.*")
str_extract_all(doc_cn$text, ".*\\明显.*")
str_extract_all(doc_cn$text, ".*显著.*")
str_extract_all(doc_cn$text, ".*证实.*")
bo_js <-
str_extract_all(doc_cn$text, ".*揭示.*")
bo_js
str_extract_all(doc_cn$text, ".*证明.*")
str_extract_all(doc_cn$text, ".*\\验证.*")
str_extract_all(doc_cn$text, ".*有望.*")
str_extract_all(doc_cn$text, ".*\\难.*")
str_extract_all(doc_cn$text, ".*说明.*")
str_extract_all(doc_cn$text, ".*我们.*")
if (!file.exists("README.md")) {
file.create(README.md)}
file.create(README.md)
if (!file.exists("README.md")) {
file.create("README.md")}
str_extract_all(doc_cn$text, ".*\\但.*")
library(stringr)
str_extract_all(doc_cn$text, ".*\\但.*")
library(dplyr)
library(knitr)
library(stringr)
library(readr)
library(readtext)
library(fs)
doc_en <- readtext("data/original/ST.doc")
file_cn <- "data/original/TT.doc"
Encoding(file_cn) <- "UTF-8"
doc_cn <- readtext(file_cn)
text_content_en <- doc_en$text
text_content_cn <- doc_cn$text
lines_en <- readLines(textConnection(text_content_en))
lines_cn <- readLines(textConnection(text_content_cn))
str_extract_all(doc_cn$text, ".*\\但.*")
str_extract_all(doc_cn$text, ".*\\但是.*")
str_extract_all(doc_cn$text, "\\b但\\b[^\u4e00-\u9fff]*[。！？!?]")
str_extract_all(doc_cn$text, "\\b但\\b[^\u4e00-\u9fff]*")
str_extract_all(doc_cn$text, "\\b但\\b")
str_extract_all(doc_cn$text, ".*\\但")
str_extract_all(doc_cn$text, ".*然而.*")
str_extract_all(doc_cn$text, ".*而.*")
str_extract_all(doc_cn$text, ".*虽然.*")
str_extract_all(doc_cn$text, ".*且.*")
str_extract_all(doc_cn$text, ".*从而.*")
str_extract_all(doc_cn$text, ".*如此.*")
str_extract_all(doc_cn$text, ".*\\由于.*")
str_extract_all(doc_cn$text, ".*这样一来.*")
str_extract_all(doc_cn$text, ".*因为.*")
str_extract_all(doc_cn$text, ".*所以.*")
str_extract_all(doc_cn$text, ".*\\因此.*")
str_extract_all(doc_cn$text, ".*随后.*")
str_extract_all(doc_cn$text, ".*如果.*")
str_extract_all(doc_cn$text, ".*若.*")
str_extract_all(doc_cn$text, ".*\\或.*")
str_extract_all(doc_cn$text, ".*同时.*")
str_extract_all(doc_cn$text, ".*以及.*")
str_extract_all(doc_cn$text, ".*仍.*")
str_extract_all(doc_cn$text, ".*\\和.*")
str_extract_all(doc_cn$text, ".*也.*")
str_extract_all(doc_cn$text, ".*相比.*")
str_extract_all(doc_cn$text, ".*并.*")
str_extract_all(doc_cn$text, ".*首先.*")
str_extract_all(doc_cn$text, ".*\\先是.*")
str_extract_all(doc_cn$text, ".*\\第.次.*")
str_extract_all(doc_cn$text, ".*这是.*")
str_extract_all(doc_cn$text, ".*第.部分.*")
str_extract_all(doc_cn$text, ".*进一步.*")
str_extract_all(doc_cn$text, ".*见图.*")
str_extract_all(doc_cn$text, ".*\\如图.*")
str_extract_all(doc_cn$text, ".*补充数据图.*")
str_extract_all(doc_cn$text, ".*\\附录图.*")
str_extract_all(doc_cn$text, ".*技术原理部分.*")
str_extract_all(doc_cn$text, ".*\\方案.*")
str_extract_all(doc_cn$text, ".*附录视频.*")
str_extract_all(doc_cn$text, ".*\\上述.*")
str_extract_all(doc_cn$text, ".*先前.*")
str_extract_all(doc_en$text, ".*\\b[Ff]ig\\b.*")
str_extract_all(doc_cn$text, ".*即.*")
str_extract_all(doc_cn$text, ".*\\该.*")
str_extract_all(doc_cn$text, ".*即.*")
str_extract_all(doc_cn$text, ".*其中.*")
str_extract_all(doc_cn$text, ".*\\包括.*")
str_extract_all(doc_en$text, ".*\\b[Mm]ay\\b.*")
str_extract_all(doc_en$text, ".*\\b[Ww]e\\b.*")
str_extract_all(doc_en$text, ".*\\b[Aa]nd\\b.*")
str_extract_all(doc_en$text, ".*\\b[Aa]s\\s*such\\b.*")
R.version$version.string
RStudio.Version()
packageVersion(knitr)
packageVersion("knitr")
packageVersion("stringr")
packageVersion("readr")
packageVersion("readtext")
packageVersion("fs")
citation("stringr")
citation("fs")
library(qtalrkit)
library(knitr)
library(stringr) # match words
library(readr) # read texts in lines
library(readtext) # read the source and target text in word document
library(fs) # interacting with operating system
doc_en <- readtext("data/original/ST.doc")
file_cn <- "data/original/TT.doc"
Encoding(file_cn) <- "UTF-8"
doc_cn <- readtext(file_cn)
text_content_en <- doc_en$text
text_content_cn <- doc_cn$text
lines_en <- readLines(textConnection(text_content_en))
lines_cn <- readLines(textConnection(text_content_cn))
str_extract_all(lines_en$text, ".*\\b[Mm]ay\\b.*")
if (!file.exists("data/original/data_origin.csv")) {
create_data_origin("data/original/data_origin.csv")
}
data_en <- data.frame(sentence_id = 1:length(sentences_en), text = sentences_en)
data_en <- data.frame(sentence_id = 1:length(lines_en), text = lines_en)
data_cn <- data.frame(sentence_id = 1:length(lines_cn), text = lines_cn)
data_en
system("git config --get user.name")
system("git config --get user.email")
git config
